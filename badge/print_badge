#!/usr/bin/env python
#
# print_badge
#
# Generates SHDH badges based on a JSON formatted input file.
# Version: Alpha
#
# Copyright 2008, Joel Franusic
# ALL RIGHTS RESERVED
# 
# TODO:
#   - Give helpful error messages when the configuration file is missing parts that we expect.
#   - Add fancypants python documentation
#   - Add a library or wrapper for CUPS, send the PNG directly to CUPS
#   - Get the job ID from CUPS, wait for the CUPS job to complete before exiting, fail if the CUPS job fails 
#

# We aren't using cStringIO or urllib2 right now...
import gd, os, sys, cStringIO, urllib2, subprocess, getopt, unicodedata, time
import simplejson as json

# set the working directory to the actual path of the script
os.chdir(os.path.dirname(os.path.realpath(sys.argv[0])))

CONFIGURATION_FILE = './configuration/print_badge.config.json'
# Eventually these should come from the CONFIGURATION_FILE
IDEAL_FONT_SIZE = 300
MIN_FONT_SIZE = 8

# Shorthand for image positions.
# B = Bottom, T = Top, L = Left, R = Right, X = x, Y = y
(BL_X,BL_Y,BR_X,BR_Y,TL_X,TL_Y,TR_X,TR_Y) = (0,1,2,3,4,5,6,7)

def print_image(file):
  print_file = 'lp -d DYMO_LabelWriter_400_USB_1 -o landscape -o fitplot'.split() + [file]
  # print_file = 'lp -H test -d DYMO_LabelWriter_400_USB_1 -o landscape -o fitplot'.split() + [file]

  opts, args = getopt.getopt(sys.argv[1:], "n") # "no print"
  if opts and '-n' in opts[0]:
    print "Not executing command:",print_file
  else:
    subprocess.call(print_file)

# Implement next:
#   - Use a dict as the input
#   - Margins: top, bottom, left, right
#   - Alignment: left, right, center
#   - Turn place into a class that can place both images and strings
#     for example: place.image(properties) / place.string(properties)
#def place(image,(input_x,input_y),(input_width,input_height),font,color,string):
def place(image,(x,y),conf,item):
  # This needs to be cleaned up
  input_x = (conf[item]["x"],x)[ conf[item]["x"] is None]
  input_y = (conf[item]["y"],y)[ conf[item]["y"] is None]
  input_width = (conf[item]["width"],conf["badge"]["width"])[ conf[item]["width"] is None ]
  input_height = (conf[item]["height"],conf["badge"]["height"])[ conf[item]["height"] is None ]

  font = conf[item]["font"]
  color = image.colorAllocate(conf[item]["color"])
  string = conf[item]["string"]

  im = gd.image((input_width,input_height))

  # since we are making a temporary image, set these to origin
  x,y = 0,0
  
  # one pass calculation for ideal string size!
  size = 100
  p = im.get_bounding_rect(font,size,0,(x,y),string)
  size = min(
    (float(input_width)  / float(p[BR_X] - p[BL_X]) ) * size, # width ratio
    (float(input_height) / float(p[BR_Y] - p[TR_Y])) * size   # height ratio
    )
  p = im.get_bounding_rect(font,size,0,(x,y),string)
  y += p[TR_Y]*-1

  rv = image.string_ttf(font,size,0,(input_x,input_y + y),string,color)
  return (input_x,rv[BR_Y])


def main():
  configuration_file = open(CONFIGURATION_FILE)
  conf = json.load(configuration_file)

  # read card data in from stdin
  stdin = sys.stdin.read()
  card = json.loads(stdin)

  # merge in the card data we just got from STDIN into the default configuration
  for key,value in card.iteritems():
    if conf.has_key(key):
      conf[key]["string"] = value

  conf["badge"]["file"] = ''.join(('./completed/',card["key"],"_shdh",card["shdh_number"],'.png'))

  try:
    conf["badge"]["remove_accents"]
  except NameError:
    conf["badge"]["remove_accents"] = None

  os.environ["GDFONTPATH"] = conf["badge"]["font_path"]
 
  im = gd.image((conf["badge"]["width"],conf["badge"]["height"]))
  white = im.colorAllocate(conf["badge"]["color"])

  x,y = 0,0

  background = gd.image(conf["background"]["file"])
  background.copyTo(im,(conf["background"]["x"],conf["background"]["y"]))

  sponsor = gd.image(conf["sponsor"]["file"])
  sponsor.copyTo(im,(conf["sponsor"]["x"],conf["sponsor"]["y"]))

  for item in ['first_name', 'last_name', 'tags', 'shdh_number']:
    if conf["badge"]["remove_accents"]:
      conf[item]["string"] = unicodedata.normalize('NFKD', conf[item]["string"]).encode('ascii','ignore')
    (x,y) = place(im,(x,y),conf,item)

  badge=open(conf["badge"]["file"],"w")
  im.writePng(badge)
  badge.close()

  print_image(conf["badge"]["file"])

if __name__ == "__main__":
#  t1 = time.time()
  main()
#  t2 = time.time()
#  print 'took %0.3f ms' % ((t2-t1)*1000.0)
